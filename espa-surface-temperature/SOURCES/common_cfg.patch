diff --git a/provisional-st/scripts/st_generate_products.py b/provisional-st/scripts/st_generate_products.py
index d868fed..6219321 100755
--- a/provisional-st/scripts/st_generate_products.py
+++ b/provisional-st/scripts/st_generate_products.py
@@ -19,6 +19,7 @@ import glob
 import shutil
 from argparse import ArgumentParser
 from ConfigParser import ConfigParser
+from espa_processing.config_utils import get_cfg_file_path,retrieve_cfg
 
 import st_utilities as util
 
@@ -72,55 +73,6 @@ def retrieve_command_line_arguments():
     return args
 
 
-def get_cfg_file_path(filename):
-    """Build the full path to the config file
-
-    Args:
-        filename <str>: The name of the file to append to the full path
-
-    Raises:
-        Exception(<str>)
-    """
-
-    # Use the users home directory as the base source directory for
-    # configuration
-    if 'HOME' not in os.environ:
-        raise Exception('[HOME] not found in environment')
-    home_dir = os.environ.get('HOME')
-
-    # Build the full path to the configuration file
-    config_path = os.path.join(home_dir, '.usgs', 'espa', filename)
-
-    return config_path
-
-
-def retrieve_cfg(cfg_filename):
-    """Retrieve the configuration for the cron
-
-    Args:
-        cfg_filename <str>: Name of the configuration file
-
-    Returns:
-        cfg <ConfigParser>: Configuration for ESPA cron
-
-    Raises:
-        Exception(<str>)
-    """
-
-    # Build the full path to the configuration file
-    config_path = get_cfg_file_path(cfg_filename)
-
-    if not os.path.isfile(config_path):
-        raise Exception('Missing configuration file [{}]'
-                        .format(config_path))
-
-    # Create the object and load the configuration
-    cfg = ConfigParser()
-    cfg.read(config_path)
-
-    return cfg
-
-
 def determine_grid_points(xml_filename, data_path, debug):
     """Determines the grid points to utilize
 
